// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/

//@version=5
indicator("Volume Profile with Buy/Sell Pressure", shorttitle = "Volume Profile", overlay = true, precision = 4, max_bars_back = 1000, max_lines_count = 500)

// User Inputs
lookBack = input.int(200, title = "Volume Lookback Depth", minval = 10, maxval = 1000, tooltip = "The number of bars to look back for calculating the volume profile.")
maxBars = input.int(250, title = "Number of Bars", minval = 10, maxval = 300, tooltip = "The number of horizontal bars to use for the volume profile.")
barMultiplier = input.int(40, title = "Bar Length Multiplier", minval = 10, maxval = 500, tooltip = "Multiplier to adjust the length of the volume profile bars.")
horizontalOffset = input.int(defval = 45, title = "Bar Horizontal Offset", minval = -100, maxval = 100, tooltip = "Horizontal offset for the volume profile from the most recent bar.")
barWidth = input.int(4, title = "Bar Width", minval = 1, maxval = 20, tooltip = "The width of the volume profile bars.")
showPOC = input.bool(defval = true, title = "Show POC", tooltip = "Enable to show the Point of Control (POC) on the volume profile.")
showCumulative = input.bool(defval = true, title = "Show Cumulative Volume", tooltip = "Enable to show the cumulative volume for each price level.")
showPressure = input.bool(defval = true, title = "Show Buy/Sell Pressure", tooltip = "Enable to show buy/sell pressure at each price level.")
barColor = input(color.new(#666666, 15), title = "Cumulative Volume Color")
pocColor = input(color.rgb(242, 54, 69, 15), title = "POC Color")
bullColor = input(color.rgb(8, 153, 129, 15), title = "Buy Pressure Color")
bearColor = input(color.rgb(242, 54, 69, 15), title = "Sell Pressure Color")

// Initialize Variables
var hideProfile = na(volume)
var float maxVolume = 0.0
var float maxVolumeBullBear = 0.0
var int maxVolumeIndex = 0
barTimeChange = ta.change(time)

priceLevels = array.new_float((maxBars + 1), 0.0)
cumulativeVolume = array.new_float(maxBars, 0.0)
deltaVolume = array.new_float(maxBars, 0.0)
bullBearVolume = array.new_float(maxBars, 0.0)
cumulativeBullBearVolume = array.new_float(maxBars, 0.0)
barHeightsCumulative = array.new_int(maxBars, 0)
barHeightsBullBear = array.new_int(maxBars, 0)

float highestHigh = ta.highest(high, lookBack)
float lowestLow = ta.lowest(low, lookBack)

// Calculate Price Levels
if barstate.islast and not hideProfile
    float priceRange = (highestHigh - lowestLow) / maxBars
    for j = 1 to (maxBars + 1)
        array.set(priceLevels, (j-1), (lowestLow + priceRange * j))
    
    // Calculate Delta Volume and Cumulative Volume
    for i = 0 to (lookBack - 1)
        int deltaCounter = 0
        int bullBearCounter = 0
        array.fill(deltaVolume, 0.0)
        array.fill(bullBearVolume, 0.0)
        for j = 0 to (maxBars - 1)
            float priceLevel = array.get(priceLevels, j)
            if low[i] < priceLevel and high[i] > priceLevel
                float bullVolume = 0.0
                float bearVolume = 0.0
                float dominantVolume = 0.0
                float currentVolume = array.get(bullBearVolume, j)
                if close[i] >= open[i]
                    bullVolume := nz(volume[i])
                if close[i] <= open[i]
                    bearVolume := nz(volume[i])
                if bullVolume > bearVolume
                    dominantVolume := currentVolume + bullVolume
                    array.set(bullBearVolume, j, dominantVolume)
                else if bullVolume < bearVolume
                    dominantVolume := currentVolume - bearVolume
                    array.set(bullBearVolume, j, dominantVolume)
                bullBearCounter := bullBearCounter + 1
                array.set(deltaVolume, j, array.get(deltaVolume, j) + nz(volume[i]))
                deltaCounter := deltaCounter + 1
        for j = 0 to (maxBars - 1)
            float currentCumulativeVolume = array.get(cumulativeVolume, j)
            float currentDeltaVolume = array.get(deltaVolume, j)
            float updatedCumulativeVolume = currentCumulativeVolume + ((deltaCounter > 0) ? (currentDeltaVolume / deltaCounter) : 0.0)
            array.set(cumulativeVolume, j, updatedCumulativeVolume)
            float currentCumulativeBullBearVolume = array.get(cumulativeBullBearVolume, j)    
            float currentBullBearVolume = array.get(bullBearVolume, j)
            float updatedCumulativeBullBearVolume = currentCumulativeBullBearVolume + ((bullBearCounter > 0) ? (currentBullBearVolume / bullBearCounter) : 0.0)
            array.set(cumulativeBullBearVolume, j, updatedCumulativeBullBearVolume)
    
    // Find Maximum Cumulative Volume
    maxVolume := array.max(cumulativeVolume)
    maxVolumeIndex := array.indexof(cumulativeVolume, maxVolume)
    
    // Calculate Bar Heights
    for j = 0 to (maxBars - 1)
        float currentVolume = array.get(cumulativeVolume, j)
        int barHeight = math.round(barMultiplier * (currentVolume / maxVolume))
        array.set(barHeightsCumulative, j, barHeight)
        float currentVolumeBullBear = array.get(cumulativeBullBearVolume, j)
        int barHeightBullBear = math.round(barMultiplier * (currentVolumeBullBear / maxVolume))
        array.set(barHeightsBullBear, j, barHeightBullBear)

endX = bar_index + horizontalOffset

// Set Up Bars
setupBarCumulative(n) =>
    startX = ((maxVolumeIndex == n) and showPOC) ? bar_index - lookBack : endX - array.get(barHeightsCumulative, n)
    price = array.get(priceLevels, n)
    line.new(x1     = startX,
             y1     = price,
             x2     = endX,
             y2     = price,
             xloc   = xloc.bar_index,
             extend = extend.none,
             color  = (maxVolumeIndex == n and showPOC ? pocColor : barColor),
             style  = line.style_solid,
             width  = (maxVolumeIndex == n and showPOC ? barWidth + 1 : barWidth))

setupBarBullBear(n) =>
    barHeight = array.get(barHeightsBullBear, n)
    isBearVolume = 1
    if barHeight > 0
        isBearVolume := 0
        barHeight := barHeight * -1
    startX = endX - barHeight
    price = array.get(priceLevels, n)
    line.new(x1     = startX,
             y1     = price,
             x2     = endX,
             y2     = price,
             xloc   = xloc.bar_index,
             extend = extend.none,
             color  = (isBearVolume ? bearColor : bullColor),
             style  = line.style_solid,
             width  = barWidth)

// Draw Bars
if barstate.islast and not hideProfile
    for i = 0 to (maxBars - 1) by 1
        if showCumulative
            setupBarCumulative(i)
        if showPressure
            setupBarBullBear(i)