// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Credit to @kv4coins for their work on this volume profile found here https://www.tradingview.com/script/r3VrWAO4-Volume-Profile/ which inspired the code behind this volume profile
// Â© adobrusky

//@version=5
indicator("Volume Profile with Buy/Sell Pressure", shorttitle = "Volume Profile", overlay = true, precision = 4, max_bars_back = 1000, max_lines_count = 500)

// User Inputs
lookBack = input.int(200, title = "Volume Lookback Depth", minval = 10, maxval = 1000)
maxBars = input.int(250, title = "Number of Bars", minval = 10, maxval = 300)
barMultiplier = input.int(50, title = "Bar Length Multiplier", minval = 10, maxval = 500)
horizontalOffset = input.int(defval = 30, title = "Bar Horizontal Offset", minval = -100, maxval = 100)
barWidth = input.int(2, title = "Bar Width", minval = 1, maxval = 20)
showPOC = input.bool(defval = true, title = "Show POC")
barColor = input(color.new(#666666, 30), title = "Cumulative Volume Color")
pocColor = input(color.rgb(243, 152, 15), title = "POC Color")
bullColor = input(color.rgb(8, 153, 129, 30), title = "Buy Pressure Color")
bearColor = input(color.rgb(242, 54, 69, 30), title = "Sell Pressure Color")

// Initialize Variables
var hideProfile = na(volume)
var float maxVolume = 0.0
var float maxVolumeBullBear = 0.0
var int maxVolumeIndex = 0
barTimeChange = ta.change(time)
var int firstBarTime = time

priceLevels = array.new_float((maxBars + 1), 0.0)
cumulativeVolume = array.new_float(maxBars, 0.0)
deltaVolume = array.new_float(maxBars, 0.0)
bullBearVolume = array.new_float(maxBars, 0.0)
cumulativeBullBearVolume = array.new_float(maxBars, 0.0)
barHeightsCumulative = array.new_int(maxBars, 0)
barHeightsBullBear = array.new_int(maxBars, 0)

float highestHigh = ta.highest(high, lookBack)
float lowestLow = ta.lowest(low, lookBack)
// Calculate Price Levels
if barstate.islast and not hideProfile
    float priceRange = (highestHigh - lowestLow) / maxBars
    for j = 1 to (maxBars + 1)
        array.set(priceLevels, (j-1), (lowestLow + priceRange * j))
    
    // Calculate Delta Volume and Cumulative Volume
    for i = 0 to (lookBack - 1)
        int deltaCounter = 0
        int bullBearCounter = 0
        array.fill(deltaVolume, 0.0)
        array.fill(bullBearVolume, 0.0)
        for j = 0 to (maxBars - 1)
            float priceLevel = array.get(priceLevels, j)
            if low[i] < priceLevel and high[i] > priceLevel
                float bullVolume = 0.0
                float bearVolume = 0.0
                float dominantVolume = 0.0
                float currentVolume = array.get(bullBearVolume, j)
                if close[i] >= open[i]
                    bullVolume := nz(volume[i])
                if close[i] <= open[i]
                    bearVolume := nz(volume[i])
                if bullVolume > bearVolume
                    dominantVolume := currentVolume + bullVolume
                    array.set(bullBearVolume, j, dominantVolume)
                else if bullVolume < bearVolume
                    dominantVolume := currentVolume - bearVolume
                    array.set(bullBearVolume, j, dominantVolume)
                bullBearCounter := bullBearCounter + 1
                array.set(deltaVolume, j, array.get(deltaVolume, j) + nz(volume[i]))
                deltaCounter := deltaCounter + 1
        for j = 0 to (maxBars - 1)
            float currentCumulativeVolume = array.get(cumulativeVolume, j)
            float currentDeltaVolume = array.get(deltaVolume, j)
            float updatedCumulativeVolume = currentCumulativeVolume + ((deltaCounter > 0) ? (currentDeltaVolume / deltaCounter) : 0.0)
            array.set(cumulativeVolume, j, updatedCumulativeVolume)
            float currentCumulativeBullBearVolume = array.get(cumulativeBullBearVolume, j)    
            float currentBullBearVolume = array.get(bullBearVolume, j)
            float updatedCumulativeBullBearVolume = currentCumulativeBullBearVolume + ((bullBearCounter > 0) ? (currentBullBearVolume / bullBearCounter) : 0.0)
            array.set(cumulativeBullBearVolume, j, updatedCumulativeBullBearVolume)
    
    // Find Maximum Cumulative Volume
    maxVolume := array.max(cumulativeVolume)
    maxVolumeIndex := array.indexof(cumulativeVolume, maxVolume)
    
    // Calculate Bar Heights
    for j = 0 to (maxBars - 1)
        float currentVolume = array.get(cumulativeVolume, j)
        int barHeight = math.round(barMultiplier * (currentVolume / maxVolume))
        array.set(barHeightsCumulative, j, barHeight)
        float currentVolumeBullBear = array.get(cumulativeBullBearVolume, j)
        int barHeightBullBear = math.round(barMultiplier * (currentVolumeBullBear / maxVolume))
        array.set(barHeightsBullBear, j, barHeightBullBear)

// Store First Bar Time
if barstate.isfirst
    firstBarTime := time

// Calculate Bar X-Location
endX = time + math.round(barTimeChange * horizontalOffset)

// Set Up Bars
setupBarCumulative(n) =>
    startX = ((maxVolumeIndex == n) and showPOC) ? math.max(time[lookBack], firstBarTime) : (time + math.round(barTimeChange * (horizontalOffset - array.get(barHeightsCumulative, n))))
    price = array.get(priceLevels, n)
    line.new(x1     = startX,
             y1     = price,
             x2     = endX,
             y2     = price,
             xloc   = xloc.bar_time,
             extend = extend.none,
             color  = (maxVolumeIndex == n and showPOC ? pocColor : barColor),
             style  = line.style_solid,
             width  = (maxVolumeIndex == n and showPOC ? barWidth + 1 : barWidth))

setupBarBullBear(n) =>
    barHeight = array.get(barHeightsBullBear, n)
    isBearVolume = 1
    if barHeight > 0
        isBearVolume := 0
        barHeight := barHeight * -1
    startX = time + math.round(barTimeChange * (horizontalOffset - barHeight))
    price = array.get(priceLevels, n)
    line.new(x1     = startX,
             y1     = price,
             x2     = endX,
             y2     = price,
             xloc   = xloc.bar_time,
             extend = extend.none,
             color  = (isBearVolume ? bearColor : bullColor),
             style  = line.style_solid,
             width  = barWidth)

// Draw Bars
if barstate.islast and not hideProfile
    for i = 0 to (maxBars - 1) by 1
        setupBarCumulative(i)
        setupBarBullBear(i)